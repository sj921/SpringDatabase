02_Mybatis.txt

 # Mybatis
 
  - 쿼리문만 적으면 알아서 DB에서 데이터를 꺼내오는 프레임워크
  - 거의 모든 jdbc 관련 코드를 자동화 해준다
  - 개발자는 사용할 쿼리의 종류와 SQL문만 작성하면 된다
  
 # 필요한 의존성들
  
  - mybatis
  - mybatis-spring
  - spring-jdbc
  
 # Mapper
 
  - Mybatis에 Mapper 인터페이스를 등록하면 해당 Mapper의 정보를 통해 자동으로 메서드를 생성한다
	(리턴타입, 쿼리문 종류, 쿼리문만 가지고 모든 jdbc 코드를 자동 생성)
  
  - Mapper는 mybatis-spring 의존성을 추가한 후 스캔을 통해 쉽게 등록할 수 있다 
	<mybatis-spring:scan base-package="com.ezen.springdb.mapper" />
  
  - Mybatis가 Mapper를 통해 메서드를 자동으로 생성하기 위해서는 SqlSessionFactory 인스턴스가 필요한데
	해당 인스턴스는 생성하기 위해서는 DataSource가 필요하다 (HikariCP로 만들어둔 HikariDataSource를 전달) 
  	  	
  	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="hikari_datasource" />
	</bean>
  
		♧ sqlSession : DB와의 연결체라고 생각하면 됨
  
		♧ Factory 디자인 패턴
		  예) class AppleFactory {} <- AppleConfig 등록
		  	 getApple 나오게 할 수 있다
  
  
  # 어노테이션 방식의 Mapper
  
   @Select(query)
   @Insert(query)
   @Update(query)
   @Delete(query)
      
   - 파라미터를 사용할 때는 #{id}처럼 사용한다
   - DB의 컬럼명과 DTO의 필드명이 일치하면 데이터를 자동으로 매핑해준다
   - 조회하는 데이터가 여러 행인 경우 자동으로 List 타입으로 매핑해준다
   - 조회하는 데이터가 하나의 행인 경우 해당 DTO 타입으로 매핑해준다
  
  # XML 방식의 Mapper (더 많이 사용함)
  
   1. Java Mapper Interface를 생성한다
   
   2. src/main/resources에 똑같은 경로의 폴더를 만든다
   
   3. 해당 Mapper와 똑같은 이름의 xml 파일을 생성한다
   
   4. 잘 작성한다 (기본 형태는 Mybatis 홈페이지에 있다)
  
  
 # XML 방식의 설정 파일
 
  - SqlSessionFactory에 설정 파일을 추가해놓으면 SqlSession 생성시 해당 설정을 사용한다.
  - <property name="configLocation" value="classpath:/mybatis-config-base.xml" />
  	(경로는 resources 밑의 경로를 사용한다, 서버 클린 후 적용)
  
 	<?xml version="1.0" encoding="UTF-8" ?>
	<!DOCTYPE configuration
	  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
	  "https://mybatis.org/dtd/mybatis-3-config.dtd">
	<configuration>
	  <settings>
	   	<setting name="jdbcTypeForNull" value="NULL" /> <
	  </settings>
	</configuration>
  
  - settings 내부에 사용할 수 있는 옵션들은 
    https://mybatis.org/mybatis-3/configuration.html#settings
  
 
 # XML 방식으로 insert 하기
 
  - parameterType : insert할 때는 resultType이 아닌 parameterType이 필요하다
  - selectKey : insert 당시 사용될 시퀀스값을 미리 생성하여 dto에 넣어놓은 후 insert를 진행한다
  - update, delete에서도 selectKey를 쓸 수 있지만.. 잘 쓰지 않는다
 
	<insert id="insert" parameterType="com.ezen.springdb.dto.Employee">
		<selectKey keyProperty="employee_id" order="BEFORE" resultType="int">
			SELECT employees_seq.nextval FROM dual  	
		</selectKey>  
		INSERT INTO employees VALUES(
			#{employee_id},
			#{first_name},
			#{last_name},
			#{email},
			#{phone_number},
			#{hire_date},
			#{job_id},
			#{salary},
			#{commission_pct},
			#{manager_id},
			#{department_id}
		)
	</insert>
 
 
 
 
  
  